// Generated by CoffeeScript 1.7.1
(function() {
  var Cockpit, model,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  model = {
    airSpeed: null,
    altimeter: null,
    attitudeIndicator: null,
    headingIndicator: null,
    turnCoordinator: null,
    verticalSpeedIndicator: null
  };

  Cockpit = (function() {
    function Cockpit() {
      this.updateInstruments = __bind(this.updateInstruments, this);
      this.airSpeedMovementHandler = __bind(this.airSpeedMovementHandler, this);
      this.grabAirSpeedWidgetSliders = __bind(this.grabAirSpeedWidgetSliders, this);
      this.grabTurnCoordinatorSliders = __bind(this.grabTurnCoordinatorSliders, this);
      this.grabAttitudeIndicatorSliders = __bind(this.grabAttitudeIndicatorSliders, this);
      this.grabHeadingIndicatorSliders = __bind(this.grabHeadingIndicatorSliders, this);
      this.heightMovementHandler = __bind(this.heightMovementHandler, this);
      this.grabAltimeterSliders = __bind(this.grabAltimeterSliders, this);
      this.verticalSpeedChangedHandler = __bind(this.verticalSpeedChangedHandler, this);
      this.grabVerticalSpeedSliders = __bind(this.grabVerticalSpeedSliders, this);
      this.reloadWidget = __bind(this.reloadWidget, this);
      this.resize = __bind(this.resize, this);
      this.isLoaded = __bind(this.isLoaded, this);
      this.nextDouble = __bind(this.nextDouble, this);
      this.nextInt = __bind(this.nextInt, this);
      this.airSpeedWidget = null;
      this.airSpeedSlider = null;
      this.altimeterWidget = null;
      this.heightSlider = null;
      this.attitudeIndicatorWidget = null;
      this.pitchSlider = null;
      this.rollSlider = null;
      this.headingIndicatorWidget = null;
      this.directionSlider = null;
      this.turnCoordinatorWidget = null;
      this.turnRollSlider = null;
      this.slipSlider = null;
      this.verticalSpeedIndicatorWidget = null;
      this.verticalSpeedSlider = null;
      this.timeOutMiliseconds = 1000;
      this.pitchValue = 0;
      this.rollValue = 0;
      this.timeoutId = 0;
      this.timeOutMiliseconds = 1000;
      this.self = this;
      $.getJSON("json/model1.json", (function(_this) {
        return function(data) {
          return model.airSpeed = data;
        };
      })(this));
      $.getJSON("json/model2.json", (function(_this) {
        return function(data) {
          return model.altimeter = data;
        };
      })(this));
      $.getJSON("json/model3.json", (function(_this) {
        return function(data) {
          return model.attitudeIndicator = data;
        };
      })(this));
      $.getJSON("json/model4.json", (function(_this) {
        return function(data) {
          return model.headingIndicator = data;
        };
      })(this));
      $.getJSON("json/model5.json", (function(_this) {
        return function(data) {
          return model.turnCoordinator = data;
        };
      })(this));
      $.getJSON("json/model6.json", (function(_this) {
        return function(data) {
          return model.verticalSpeedIndicator = data;
        };
      })(this));
    }

    Cockpit.prototype.nextInt = function(minValue, maxValue) {
      return Math.floor((Math.random() * (maxValue - minValue)) + minValue);
    };

    Cockpit.prototype.nextDouble = function(minValue, maxValue) {
      return (Math.random() * (maxValue - minValue)) + minValue;
    };

    Cockpit.prototype.isLoaded = function() {
      return (model.airSpeed != null) && (model.altimeter != null) && (model.attitudeIndicator != null) && (model.headingIndicator != null) && (model.turnCoordinator != null) && (model.verticalSpeedIndicator != null);
    };

    Cockpit.prototype.resize = function() {
      if (this.isLoaded()) {
        console.log("resize()");
        this.airSpeedWidget.rescale();
        this.altimeterWidget.rescale();
        this.attitudeIndicatorWidget.rescale();
        this.headingIndicatorWidget.rescale();
        this.turnCoordinatorWidget.rescale();
        return this.verticalSpeedIndicatorWidget.rescale();
      } else {
        return console.log("not loaded");
      }
    };

    Cockpit.prototype.reloadWidget = function() {
      console.log("Attempting to reloadWidget");
      if (this.isLoaded()) {
        console.log("reloadWidget");
        this.airSpeedWidget = new PerfectWidgets.Widget("airSpeed", model.airSpeed);
        this.altimeterWidget = new PerfectWidgets.Widget("altimeter", model.altimeter);
        this.attitudeIndicatorWidget = new PerfectWidgets.Widget("attitudeIndicator", model.attitudeIndicator);
        this.headingIndicatorWidget = new PerfectWidgets.Widget("headingIndicator", model.headingIndicator);
        this.turnCoordinatorWidget = new PerfectWidgets.Widget("turnCoordinator", model.turnCoordinator);
        this.verticalSpeedIndicatorWidget = new PerfectWidgets.Widget("verticalSpeedIndicator", model.verticalSpeedIndicator);
        this.grabAttitudeIndicatorSliders();
        this.grabAltimeterSliders();
        this.grabAirSpeedWidgetSliders();
        this.grabHeadingIndicatorSliders();
        this.grabTurnCoordinatorSliders();
        this.grabVerticalSpeedSliders();
        return this.timeoutId = window.setTimeout(this.updateInstruments, this.timeOutMiliseconds);
      } else {
        return window.setTimeout(this.reloadWidget, this.timeOutMiliseconds);
      }
    };

    Cockpit.prototype.grabVerticalSpeedSliders = function() {
      this.verticalSpeedSlider = this.verticalSpeedIndicatorWidget.getByName("Slider2");
      this.verticalSpeedSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 20
      });
      return this.verticalSpeedSlider.addAnimationValueChangedHandler(this.verticalSpeedChangedHandler);
    };

    Cockpit.prototype.verticalSpeedChangedHandler = function(sender, e) {
      return this.verticalSpeedIndicatorWidget.getByName("Slider1").recalculate();
    };

    Cockpit.prototype.grabAltimeterSliders = function() {
      this.heightSlider = this.altimeterWidget.getByName("height");
      this.heightSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 500
      });
      return this.heightSlider.addAnimationValueChangedHandler(this.heightMovementHandler);
    };

    Cockpit.prototype.heightMovementHandler = function(sender, e) {
      this.altimeterWidget.getByName("Slider1").recalculate();
      return this.altimeterWidget.getByName("Slider2").recalculate();
    };

    Cockpit.prototype.grabHeadingIndicatorSliders = function() {
      this.directionSlider = this.headingIndicatorWidget.getByName("Slider1");
      return this.directionSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 10
      });
    };

    Cockpit.prototype.grabAttitudeIndicatorSliders = function() {
      this.pitch = this.attitudeIndicatorWidget.getByName("Pitch");
      this.rollSlider = this.attitudeIndicatorWidget.getByName("Roll");
      return this.rollSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 10
      });
    };

    Cockpit.prototype.grabTurnCoordinatorSliders = function() {
      this.slipSlider = this.turnCoordinatorWidget.getByName("Slider2");
      this.turnRollSlider = this.turnCoordinatorWidget.getByName("Slider1");
      return this.turnRollSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 2
      });
    };

    Cockpit.prototype.grabAirSpeedWidgetSliders = function() {
      this.airSpeedSlider = this.airSpeedWidget.getByName("Speed");
      this.airSpeedSlider.configureAnimation({
        "enabled": true,
        "ease": "swing",
        "duration": 20
      });
      return this.airSpeedSlider.addAnimationValueChangedHandler(this.airSpeedMovementHandler);
    };

    Cockpit.prototype.airSpeedMovementHandler = function(sender, e) {
      return this.airSpeedWidget.getByName("Slider2").recalculate();
    };

    Cockpit.prototype.updateInstruments = function(settings) {
      this.pitchValue = settings.pitchValue;
      this.rollValue = settings.rollValue;
      this.turnRollSlider.setValue(this.rollValue);
      this.rollSlider.setValue(this.rollValue);
      this.pitch.setValue(this.pitchValue);
      this.heightSlider.setValue(settings.heightSlider);
      this.directionSlider.setValue(settings.directionSlider);
      this.airSpeedSlider.setValue(settings.airSpeedSlider);
      this.slipSlider.setValue(settings.slipSlider);
      return this.verticalSpeedSlider.setValue(settings.verticalSpeedSlider);
    };

    return Cockpit;

  })();

  if (window.flightSim2 == null) {
    window.flightSim2 = {};
  }

  window.flightSim2.initCockpit = function(settings) {
    var cockpit;
    cockpit = new Cockpit();
    return cockpit;
  };

}).call(this);
