// Generated by CoffeeScript 1.7.1
(function() {
  var World,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  World = (function() {
    function World(weather) {
      this.weather = weather;
      this.resize = __bind(this.resize, this);
      this.setupScene = __bind(this.setupScene, this);
      this.render = __bind(this.render, this);
      this.animate = __bind(this.animate, this);
      this.addAirplane = __bind(this.addAirplane, this);
      this.init = __bind(this.init, this);
      this.init();
      this.runAnim = true;
    }

    World.prototype.init = function() {
      var d, rad, skyParams;
      this.clock = new THREE.Clock();
      this.container = document.getElementById('world');
      this.worldWidth = 1024;
      this.worldHeight = 568;
      this.aspect = this.worldWidth / this.worldHeight;
      this.camera = new THREE.PerspectiveCamera(30, this.aspect, 1, 5000);
      this.camera.position.set(0, 0, 0);
      rad = 30 * Math.PI / 180;
      this.camera.rotateOnAxis(new THREE.Vector3(0, 0, 1), rad);
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.Fog(0xffffff, 1, 5000);
      this.scene.fog.color.setHSL(0.6, 0, 1);
      this.hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);
      this.hemiLight.color.setHSL(0.6, 1, 0.6);
      this.hemiLight.groundColor.setHSL(0.095, 1, 0.75);
      this.hemiLight.position.set(0, 500, 0);
      this.scene.add(this.hemiLight);
      this.dirLight = new THREE.DirectionalLight(0xffffff, 1);
      this.dirLight.color.setHSL(0.1, 1, 0.95);
      this.dirLight.position.set(-1, 1.75, 1);
      this.dirLight.position.multiplyScalar(50);
      this.scene.add(this.dirLight);
      this.dirLight.castShadow = true;
      this.dirLight.shadowMapWidth = 2048;
      this.dirLight.shadowMapHeight = 2048;
      d = 50;
      this.dirLight.shadowCameraLeft = -d;
      this.dirLight.shadowCameraRight = d;
      this.dirLight.shadowCameraTop = d;
      this.dirLight.shadowCameraBottom = -d;
      this.dirLight.shadowCameraFar = 3500;
      this.dirLight.shadowBias = -0.0001;
      this.dirLight.shadowDarkness = 0.35;
      this.groundGeo = new THREE.PlaneBufferGeometry(10000, 10000);
      this.groundMat = new THREE.MeshPhongMaterial({
        ambient: 0xffffff,
        color: 0xffffff,
        specular: 0x050505
      });
      this.groundMat.color.setHSL(0.095, 1, 0.75);
      this.ground = new THREE.Mesh(this.groundGeo, this.groundMat);
      this.ground.rotation.x = -Math.PI / 2;
      this.ground.position.y = -33;
      this.scene.add(this.ground);
      this.ground.receiveShadow = true;
      this.geometry = new THREE.BoxGeometry(100, 100, 100);
      this.material = new THREE.MeshBasicMaterial({
        color: 0x00ff00
      });
      this.cube = new THREE.Mesh(this.geometry, this.material);
      this.scene.add(this.cube);
      this.vertexShader = document.getElementById('vertexShader').textContent;
      this.fragmentShader = document.getElementById('fragmentShader').textContent;
      this.uniforms = {
        topColor: {
          type: "c",
          value: new THREE.Color(0x0077ff)
        },
        bottomColor: {
          type: "c",
          value: new THREE.Color(0xffffff)
        },
        offset: {
          type: "f",
          value: 33
        },
        exponent: {
          type: "f",
          value: 0.6
        }
      };
      this.uniforms.topColor.value.copy(this.hemiLight.color);
      this.scene.fog.color.copy(this.uniforms.bottomColor.value);
      this.skyGeo = new THREE.SphereGeometry(4000, 32, 15);
      skyParams = {
        vertexShader: this.vertexShader,
        fragmentShader: this.fragmentShader,
        uniforms: this.uniforms,
        side: THREE.BackSide
      };
      this.skyMat = new THREE.ShaderMaterial(skyParams);
      this.sky = new THREE.Mesh(this.skyGeo, this.skyMat);
      this.scene.add(this.sky);
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(this.worldWidth, this.worldHeight);
      this.container.appendChild(this.renderer.domElement);
      this.renderer.setClearColor(this.scene.fog.color, 1);
      this.renderer.gammaInput = true;
      this.renderer.gammaOutput = true;
      this.renderer.shadowMapEnabled = true;
      return this.renderer.shadowMapCullFace = THREE.CullFaceBack;
    };

    World.prototype.addAirplane = function(airplane) {
      return this.airplane = airplane;
    };

    World.prototype.animate = function() {
      if (this.runAnim) {
        requestAnimationFrame(this.animate);
      }
      return this.render();
    };

    World.prototype.render = function() {
      var delta;
      delta = this.clock.getDelta();
      return this.renderer.render(this.scene, this.camera);
    };

    World.prototype.setupScene = function() {
      var directionalLight1, directionalLight2, floor, geometry, material, units;
      this.unitSize = 250;
      units = 10;
      geometry = new THREE.CubeGeometry(units * this.unitSize, 10, units * this.unitSize);
      material = new THREE.MeshLambertMaterial({
        color: 0xEDCBA0,
        map: THREE.ImageUtils.loadTexture('images/floor-1.jpg')
      });
      floor = new THREE.Mesh(geometry, material);
      this.scene.add(floor);
      directionalLight1 = new THREE.DirectionalLight(0xF7EFBE, 0.7);
      directionalLight1.position.set(0.5, 1, 0.5);
      this.scene.add(directionalLight1);
      directionalLight2 = new THREE.DirectionalLight(0xF7EFBE, 0.5);
      directionalLight2.position.set(-0.5, -1, -0.5);
      return this.scene.add(directionalLight2);
    };

    World.prototype.resize = function() {
      this.width = window.innerWidth;
      this.height = window.innerHeight;
      this.aspect = this.width / this.height;
      if (this.camera) {
        this.camera.aspect = this.aspect;
      }
      this.camera.updateProjectionMatrix();
      if (this.renderer) {
        return this.renderer.setSize(this.width, this.height);
      }
    };

    return World;

  })();

  if (window.flightSim2 == null) {
    window.flightSim2 = {};
  }

  window.flightSim2.initWorld = function(weather) {
    var world;
    world = new World(weather);
    return world;
  };

}).call(this);
