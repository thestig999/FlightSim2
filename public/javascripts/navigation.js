// Generated by CoffeeScript 1.7.1
(function() {
  var Navigation;

  Navigation = (function() {
    function Navigation(camera) {
      this.camera = camera;
      this.target = new THREE.Vector3(0, 0, 0);
      this.settings = {
        movementSpeed: 1.0,
        lookSpeed: 0.005,
        noFly: false,
        lookVertical: true,
        autoForward: false,
        activeLook: true,
        clickMove: false,
        heightSpeed: false,
        heightCoef: 1.0,
        heightMin: 0.0,
        constrainVertical: false,
        verticalMin: 0,
        verticalMax: Math.PI,
        autoSpeedFactor: 0.0,
        mouseX: 0,
        mouseY: 0,
        lat: 0,
        lon: 0,
        phi: 0,
        theta: 0,
        moveForward: false,
        moveBackward: false,
        moveLeft: false,
        moveRight: false,
        freeze: false,
        mouseDragOn: false
      };
    }

    Navigation.prototype.changeSettings = function(settings) {
      if (settings != null) {
        this.settings = settings;
      }
      return this.settings;
    };

    Navigation.prototype.update = function(delta) {
      var actualLookSpeed, actualMoveSpeed, heightDelta, position, targetPosition, verticalLookRatio, y;
      actualMoveSpeed = 0;
      if (this.settings.freeze) {
        return;
      }
      if (this.settings.heightSpeed) {
        y = THREE.Math.clamp(this.camera.position.y, this.settings.heightMin, this.settings.heightMax);
        heightDelta = y - this.settings.heightMin;
        this.settings.autoSpeedFactor = delta * (heightDelta * this.settings.heightCoef);
      } else {
        this.settings.autoSpeedFactor = 0.0;
      }
      actualMoveSpeed = delta * this.settings.movementSpeed;
      if (this.settings.moveForward || (this.settings.autoForward && !this.settings.moveBackward)) {
        this.camera.translateZ(-(actualMoveSpeed + this.settings.autoSpeedFactor));
      }
      if (this.settings.moveBackward) {
        this.camera.translateZ(actualMoveSpeed);
      }
      if (this.settings.moveLeft) {
        this.camera.translateX(-actualMoveSpeed);
      }
      if (this.settings.moveRight) {
        this.camera.translateX(actualMoveSpeed);
      }
      if (!this.settings.noFly) {
        if (this.settings.moveUp) {
          this.camera.translateY(actualMoveSpeed);
        }
        if (this.settings.moveDown) {
          this.camera.translateY(-actualMoveSpeed);
        }
      }
      actualLookSpeed = delta * this.settings.lookSpeed;
      if (!this.settings.activeLook) {
        actualLookSpeed = 0;
      }
      this.settings.lon += this.settings.mouseX * actualLookSpeed;
      if (this.settings.lookVertical) {
        this.settings.lat -= this.settings.mouseY * actualLookSpeed;
      }
      this.settings.lat = Math.max(-85, Math.min(85, this.settings.lat));
      this.settings.phi = (90 - this.settings.lat) * Math.PI / 180;
      this.settings.theta = this.settings.lon * Math.PI / 180;
      targetPosition = this.settings.target;
      position = this.camera.position;
      targetPosition.x = position.x + 100 * Math.sin(this.settings.phi) * Math.cos(this.settings.theta);
      targetPosition.y = position.y + 100 * Math.cos(this.settings.phi);
      targetPosition.z = position.z + 100 * Math.sin(this.settings.phi) * Math.sin(this.settings.theta);
      verticalLookRatio = 1;
      if (this.settings.constrainVertical) {
        verticalLookRatio = Math.PI / (this.settings.verticalMax - this.settings.verticalMin);
      }
      this.settings.lon += this.settings.mouseX * actualLookSpeed;
      if (this.settings.lookVertical) {
        this.settings.lat -= this.settings.mouseY * actualLookSpeed * verticalLookRatio;
      }
      this.settings.lat = Math.max(-85, Math.min(85, this.settings.lat));
      this.settings.phi = (90 - this.settings.lat) * Math.PI / 180;
      this.settings.theta = this.settings.lon * Math.PI / 180;
      if (this.settings.constrainVertical) {
        this.settings.phi = THREE.Math.mapLinear(this.settings.phi, 0, Math.PI, this.settings.verticalMin, this.settings.verticalMax);
      }
      targetPosition = this.settings.target;
      position = this.camera.position;
      targetPosition.x = position.x + 100 * Math.sin(this.settings.phi) * Math.cos(this.settings.theta);
      targetPosition.y = position.y + 100 * Math.cos(this.settings.phi);
      targetPosition.z = position.z + 100 * Math.sin(this.settings.phi) * Math.sin(this.settings.theta);
      return this.camera.lookAt(targetPosition);
    };

    return Navigation;

  })();

  if (window.flightSim2 == null) {
    window.flightSim2 = {};
  }

  window.flightSim2.initNavigation = function(camera, location) {
    var navigation;
    navigation = new Navigation(camera);
    return navigation;
  };

}).call(this);
